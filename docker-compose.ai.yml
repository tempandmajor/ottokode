version: '3.8'

services:
  # Frontend (React app)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
      - ai-service
    restart: unless-stopped
    networks:
      - ai-ide-network

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - ai-ide-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Service (Dedicated container for AI workloads)
  ai-service:
    build:
      context: .
      dockerfile: Dockerfile.ai
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - CUDA_VISIBLE_DEVICES=0  # GPU support
    env_file:
      - .env.production
    volumes:
      - ./ai-models:/app/models  # Model storage
      - ./ai-cache:/app/cache    # AI response cache
    # Memory limits for AI workloads
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
          # GPU support (uncomment if you have NVIDIA GPU)
          # devices:
          #   - driver: nvidia
          #     count: 1
          #     capabilities: [gpu]
    restart: unless-stopped
    networks:
      - ai-ide-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Redis (Caching & Session Storage)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - ai-ide-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (if not using Supabase)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ai_ide
      POSTGRES_USER: ai_ide_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - ai-ide-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_ide_user -d ai_ide"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama (Local AI models)
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    # Memory and GPU limits for Ollama
    deploy:
      resources:
        limits:
          memory: 16G
        reservations:
          memory: 8G
          # GPU support (uncomment if you have NVIDIA GPU)
          # devices:
          #   - driver: nvidia
          #     count: 1
          #     capabilities: [gpu]
    restart: unless-stopped
    networks:
      - ai-ide-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Vector Database (for AI embeddings)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    # Memory limits for vector database
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    restart: unless-stopped
    networks:
      - ai-ide-network

  # Monitoring & Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ai-ide-network

  # Grafana (Metrics Dashboard)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    restart: unless-stopped
    networks:
      - ai-ide-network

volumes:
  redis_data:
  postgres_data:
  ollama_data:
  qdrant_data:
  prometheus_data:
  grafana_data:

networks:
  ai-ide-network:
    driver: bridge